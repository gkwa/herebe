commit 16988f9ee697cd375a091f442bc1a08ffd83a58f
Author: Taylor Monacelli <taylormonacelli@gmail.com>
Date:   Mon May 6 12:14:19 2024 -0700

    version: add back as single commit

diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 72016cf..8847ceb 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -23,6 +23,12 @@ jobs:
     - uses: actions/setup-go@v4
       with:
         go-version: ">=1.21.1"
+    - name: Set GOVERSION environment variable (Linux/macOS)
+      if: runner.os != 'Windows'
+      run: echo "GOVERSION=$(go version)" >> $GITHUB_ENV
+    - name: Set GOVERSION environment variable (Windows)
+      if: runner.os == 'Windows'
+      run: echo "GOVERSION=$(go version)" | Out-File -FilePath $env:GITHUB_ENV -Append
     - name: Build & Test
       run: |
         go build -v
@@ -34,4 +40,4 @@ jobs:
     - name: Colored Output Test
       if: runner.os == 'Linux'
       shell: script -q -e -c "bash {0}"
-      run: go run main.go -- main.go
+      run: go run main.go version
diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml
index 0688b59..bffb52d 100644
--- a/.github/workflows/release.yml
+++ b/.github/workflows/release.yml
@@ -16,6 +16,8 @@ jobs:
     - uses: actions/setup-go@v4
       with:
         go-version: ">=1.21.1"
+    - name: Set GOVERSION environment variable
+      run: echo "GOVERSION=$(go version)" >>$GITHUB_ENV
     - name: Release via goreleaser
       uses: goreleaser/goreleaser-action@v4
       with:
diff --git a/.goreleaser.yaml b/.goreleaser.yaml
index f5ebc9e..1b48651 100644
--- a/.goreleaser.yaml
+++ b/.goreleaser.yaml
@@ -13,6 +13,13 @@ builds:
   goarch:
   - amd64
   binary: hercow
+  ldflags:
+  - -s -w
+    -X "github.com/taylormonacelli/hercow/version.Version={{.Version}}"
+    -X "github.com/taylormonacelli/hercow/version.Date={{.CommitDate}}"
+    -X "github.com/taylormonacelli/hercow/version.GoVersion={{.Env.GOVERSION}}"
+    -X "github.com/taylormonacelli/hercow/version.ShortGitSHA={{.ShortCommit}}"
+    -X "github.com/taylormonacelli/hercow/version.FullGitSHA={{.FullCommit}}"
   id: hercow
 archives:
 - format: tar.gz
diff --git a/Makefile b/Makefile
index a435bdd..53b07ba 100644
--- a/Makefile
+++ b/Makefile
@@ -1,3 +1,7 @@
+GOVERSION := $(shell go version)
+
+export GOVERSION
+
 ifeq ($(OS),Windows_NT)
     SOURCES := $(shell dir /S /B *.go)
 else
diff --git a/cmd/root.go b/cmd/root.go
index db41a4a..8f052b3 100644
--- a/cmd/root.go
+++ b/cmd/root.go
@@ -24,6 +24,7 @@ var rootCmd = &cobra.Command{
 Git-controlled directory and replaces it with a new string in both file contents and filenames.
 It provides options to control the maximum number of files processed and enables logging for
 debugging purposes.`,
+	Args: cobra.ExactArgs(1),
 	Run: func(cmd *cobra.Command, args []string) {
 		maxFiles, _ := cmd.Flags().GetInt("maxfiles")
 		replace, _ := cmd.Flags().GetString("replace")
diff --git a/cmd/version.go b/cmd/version.go
new file mode 100644
index 0000000..095ea7a
--- /dev/null
+++ b/cmd/version.go
@@ -0,0 +1,39 @@
+package cmd
+
+import (
+	"fmt"
+
+	"github.com/spf13/cobra"
+	"github.com/taylormonacelli/hercow/version"
+)
+
+// versionCmd represents the version command
+var versionCmd = &cobra.Command{
+	Use:   "version",
+	Short: "A brief description of your command",
+	Long: `A longer description that spans multiple lines and likely contains examples
+and usage of using your command. For example:
+
+Cobra is a CLI library for Go that empowers applications.
+This application is a tool to generate the needed files
+to quickly create a Cobra application.`,
+	Run: func(cmd *cobra.Command, args []string) {
+		fmt.Printf("Version: %s, %s\n", version.Version, version.FullGitSHA)
+		fmt.Printf("Build Date: %s\n", version.Date)
+		fmt.Printf("Go Version: %s\n", version.GoVersion)
+	},
+}
+
+func init() {
+	rootCmd.AddCommand(versionCmd)
+
+	// Here you will define your flags and configuration settings.
+
+	// Cobra supports Persistent Flags which will work for this command
+	// and all subcommands, e.g.:
+	// versionCmd.PersistentFlags().String("foo", "", "A help for foo")
+
+	// Cobra supports local flags which will only run when this command
+	// is called directly, e.g.:
+	// versionCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
+}
diff --git a/version/version.go b/version/version.go
new file mode 100644
index 0000000..663daa3
--- /dev/null
+++ b/version/version.go
@@ -0,0 +1,9 @@
+package version
+
+var (
+	Date        string
+	FullGitSHA  string
+	GoVersion   string
+	ShortGitSHA string
+	Version     string
+)
